hist(colMeans(sqrt(1/mod$v[seq(1000,10000,100),])),main="Histogram",xlab-"v_i")
hist(colMeans(sqrt(1/mod$v[seq(1000,10000,100),])),main="Histogram",xlab="v_i")
hist(colMeans(sqrt(1/mod$v[seq(1000,10000,100),])),main="Histogram of v_i",xlab="v_i")
rm(list = ls())
source("robust_bmars.R")
# f <-function(x){
#   10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
# }
#
# sigma <- 1 # noise sd
# n <- 500 # number of observations
# x <- matrix(runif(n*10),n,10) #10 variables, only first 5 matter
# y <- rnorm(n,f(x),sigma) #+ rnorm(n)
# index <- c(50, 100, 150)
# y[index] <- y[index] + rnorm(length(index), 0, 15)
n <- 200
p <- 4
noise <- rep(1, 200)
noise[c(50, 100, 150)] <- 8
x <- matrix(rnorm(n*p), nrow=n, ncol=p)
y <- matrix(x[,1]*sin(x[,1]*x[,2]) + rnorm(n, 0, noise), ncol=1)
nmcmc <- 10000
mod <- bmars(x, its = nmcmc, nu = 10, verbose = TRUE)
rm(list = ls())
source("robust_bmars.R")
# f <-function(x){
#   10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
# }
#
# sigma <- 1 # noise sd
# n <- 500 # number of observations
# x <- matrix(runif(n*10),n,10) #10 variables, only first 5 matter
# y <- rnorm(n,f(x),sigma) #+ rnorm(n)
# index <- c(50, 100, 150)
# y[index] <- y[index] + rnorm(length(index), 0, 15)
n <- 200
p <- 4
noise <- rep(1, 200)
noise[c(50, 100, 150)] <- 8
x <- matrix(rnorm(n*p), nrow=n, ncol=p)
y <- matrix(x[,1]*sin(x[,1]*x[,2]) + rnorm(n, 0, noise), ncol=1)
nmcmc <- 10000
mod <- bmars(x, its = nmcmc, nu = 10, verbose = TRUE)
X <- mod$X
beta <- mod$beta
mod$count
mod$nknot[length(mod$nknot)]
tail(mod$nknot, 25)
tail(mod$mat_beta[,1:(mod$nknot[length(mod$nknot)]+1)])
# plot(colMeans(mod$mat_w[-(1:1000),]), abs(y - X%*%beta))
plot(mod$nknot, type = "l",
main = "Number of knots over time")
# plot(mod$alpha, type = "l",
#      main = "alpha^2 values over time")
plot(mod$mat_sig[-(1:100)], type = "l",
main = "Sigma^2 values over time")
plot(mod$lam, type = "l",
main = "Lambda values over time")
# matplot(mod$mat_beta, type = "l",
#         main = "Plot of regression coefficients over time")
matplot(sqrt(mod$mat_w[seq(nmcmc/2,nmcmc,by=2),]), type="l",
main = "Plot of v_i values over time")
hist(colMeans((mod$mat_w[seq(nmcmc/2,nmcmc,by=2),])))
# matplot(sqrt(mod$mat_u), type="l",
#         main = "Plot of u_i values over time")
plot(X %*% beta, y,
main = "Bayesian predicted values vs actual y values")
points((X %*% beta)[c(50, 100, 150)],y[c(50, 100, 150)],col="red")
abline(0, 1, lwd = 5, col = "blue1") #should follow a very straight line
mod1 <- lm(y ~ X %*% beta); rsq <- summary(mod1)$r.squared
cat("The predicted y values are correlated with the actual values with
an R^2 of", rsq, "\n")
tail(mod$mat_sig)
tail(sqrt(mod$mat_w[,1:25]))
var((y-(X%*%beta)))
var(y)
var(y[-c(50,100,150)])
rm(list = ls())
source("robust_bmars.R")
# f <-function(x){
#   10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
# }
#
# sigma <- 1 # noise sd
# n <- 500 # number of observations
# x <- matrix(runif(n*10),n,10) #10 variables, only first 5 matter
# y <- rnorm(n,f(x),sigma) #+ rnorm(n)
# index <- c(50, 100, 150)
# y[index] <- y[index] + rnorm(length(index), 0, 15)
n <- 200
p <- 4
noise <- rep(1, 200)
noise[c(50, 100, 150)] <- 8
x <- matrix(rnorm(n*p), nrow=n, ncol=p)
y <- matrix(x[,1]*sin(x[,1]*x[,2]) + rnorm(n, 0, noise), ncol=1)
nmcmc <- 10000
mod <- bmars(x, its = nmcmc, nu = 10, verbose = TRUE)
rm(list = ls())
source("robust_bmars.R")
# f <-function(x){
#   10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
# }
#
# sigma <- 1 # noise sd
# n <- 500 # number of observations
# x <- matrix(runif(n*10),n,10) #10 variables, only first 5 matter
# y <- rnorm(n,f(x),sigma) #+ rnorm(n)
# index <- c(50, 100, 150)
# y[index] <- y[index] + rnorm(length(index), 0, 15)
n <- 200
p <- 4
noise <- rep(1, 200)
noise[c(50, 100, 150)] <- 8
x <- matrix(rnorm(n*p), nrow=n, ncol=p)
y <- matrix(x[,1]*sin(x[,1]*x[,2]) + rnorm(n, 0, noise), ncol=1)
nmcmc <- 10000
mod <- bmars(x, its = nmcmc, nu = 10, verbose = TRUE)
rm(list = ls())
source("robust_bmars.R")
# f <-function(x){
#   10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
# }
#
# sigma <- 1 # noise sd
# n <- 500 # number of observations
# x <- matrix(runif(n*10),n,10) #10 variables, only first 5 matter
# y <- rnorm(n,f(x),sigma) #+ rnorm(n)
# index <- c(50, 100, 150)
# y[index] <- y[index] + rnorm(length(index), 0, 15)
n <- 200
p <- 4
noise <- rep(1, 200)
noise[c(50, 100, 150)] <- 8
x <- matrix(rnorm(n*p), nrow=n, ncol=p)
y <- matrix(x[,1]*sin(x[,1]*x[,2]) + rnorm(n, 0, noise), ncol=1)
nmcmc <- 10000
mod <- bmars(x, its = nmcmc, nu = 10, verbose = TRUE)
mod <- bmars(x, its = nmcmc, nu = 10, verbose = TRUE)
recover()
Hinv_curr
chol(Hinv_curr)
Wcurr
diag(1/diag(Wcurr))
crossprod(X_curr, diag(1/diag(Wcurr))%*%y)
Hinv_curr %*% crossprod(X_curr, diag(1/diag(Wcurr))%*%y)
Hinv_curr %*% crossprod(X_curr, diag(1/diag(Wcurr))%*%y),
mat_sig[i-1]*Hinv_curr
mat_sig[i-1]*Hinv_curr
mat_sig[i-1]
rm(list = ls())
source("robust_bmars.R")
# f <-function(x){
#   10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
# }
#
# sigma <- 1 # noise sd
# n <- 500 # number of observations
# x <- matrix(runif(n*10),n,10) #10 variables, only first 5 matter
# y <- rnorm(n,f(x),sigma) #+ rnorm(n)
# index <- c(50, 100, 150)
# y[index] <- y[index] + rnorm(length(index), 0, 15)
n <- 200
p <- 4
noise <- rep(1, 200)
noise[c(50, 100, 150)] <- 8
x <- matrix(rnorm(n*p), nrow=n, ncol=p)
y <- matrix(x[,1]*sin(x[,1]*x[,2]) + rnorm(n, 0, noise), ncol=1)
nmcmc <- 10000
mod <- bmars(x, its = nmcmc, nu = 10, verbose = TRUE)
X <- mod$X
beta <- mod$beta
mod$count
mod$nknot[length(mod$nknot)]
tail(mod$nknot, 25)
tail(mod$mat_beta[,1:(mod$nknot[length(mod$nknot)]+1)])
# plot(colMeans(mod$mat_w[-(1:1000),]), abs(y - X%*%beta))
plot(mod$nknot, type = "l",
main = "Number of knots over time")
# plot(mod$alpha, type = "l",
#      main = "alpha^2 values over time")
plot(mod$mat_sig[-(1:100)], type = "l",
main = "Sigma^2 values over time")
plot(mod$lam, type = "l",
main = "Lambda values over time")
# matplot(mod$mat_beta, type = "l",
#         main = "Plot of regression coefficients over time")
matplot(sqrt(mod$mat_w[seq(nmcmc/2,nmcmc,by=2),]), type="l",
main = "Plot of v_i values over time")
hist(colMeans((mod$mat_w[seq(nmcmc/2,nmcmc,by=2),])))
# matplot(sqrt(mod$mat_u), type="l",
#         main = "Plot of u_i values over time")
plot(X %*% beta, y,
main = "Bayesian predicted values vs actual y values")
points((X %*% beta)[c(50, 100, 150)],y[c(50, 100, 150)],col="red")
abline(0, 1, lwd = 5, col = "blue1") #should follow a very straight line
mod1 <- lm(y ~ X %*% beta); rsq <- summary(mod1)$r.squared
cat("The predicted y values are correlated with the actual values with
an R^2 of", rsq, "\n")
rm(list = ls())
source("robust_bmars.R")
# f <-function(x){
#   10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
# }
#
# sigma <- 1 # noise sd
# n <- 500 # number of observations
# x <- matrix(runif(n*10),n,10) #10 variables, only first 5 matter
# y <- rnorm(n,f(x),sigma) #+ rnorm(n)
# index <- c(50, 100, 150)
# y[index] <- y[index] + rnorm(length(index), 0, 15)
n <- 200
p <- 4
noise <- rep(1, 200)
noise[c(50, 100, 150)] <- 8
x <- matrix(rnorm(n*p), nrow=n, ncol=p)
y <- matrix(x[,1]*sin(x[,1]*x[,2]) + rnorm(n, 0, noise), ncol=1)
nmcmc <- 10000
mod <- bmars(x, its = nmcmc, nu = 10, verbose = TRUE)
X <- mod$X
beta <- mod$beta
mod$count
mod$nknot[length(mod$nknot)]
tail(mod$nknot, 25)
tail(mod$mat_beta[,1:(mod$nknot[length(mod$nknot)]+1)])
# plot(colMeans(mod$mat_w[-(1:1000),]), abs(y - X%*%beta))
plot(mod$nknot, type = "l",
main = "Number of knots over time")
# plot(mod$alpha, type = "l",
#      main = "alpha^2 values over time")
plot(mod$mat_sig[-(1:100)], type = "l",
main = "Sigma^2 values over time")
plot(mod$lam, type = "l",
main = "Lambda values over time")
# matplot(mod$mat_beta, type = "l",
#         main = "Plot of regression coefficients over time")
matplot(sqrt(mod$mat_w[seq(nmcmc/2,nmcmc,by=2),]), type="l",
main = "Plot of v_i values over time")
hist(colMeans((mod$mat_w[seq(nmcmc/2,nmcmc,by=2),])))
# matplot(sqrt(mod$mat_u), type="l",
#         main = "Plot of u_i values over time")
plot(X %*% beta, y,
main = "Bayesian predicted values vs actual y values")
points((X %*% beta)[c(50, 100, 150)],y[c(50, 100, 150)],col="red")
abline(0, 1, lwd = 5, col = "blue1") #should follow a very straight line
mod1 <- lm(y ~ X %*% beta); rsq <- summary(mod1)$r.squared
cat("The predicted y values are correlated with the actual values with
an R^2 of", rsq, "\n")
tail(mod$mat_sig)
tail(sqrt(mod$mat_w[,1:25]))
var((y-(X%*%beta)))
var(y)
var(y[-c(50,100,150)])
matplot(sqrt(1/mod$mat_w[seq(nmcmc/2,nmcmc,by=2),]), type="l",
main = "Plot of v_i values over time")
hist(colMeans((sqrt(1/mod$mat_w[seq(nmcmc/2,nmcmc,by=2),]))))
rm(list = ls())
source("robust_bmars.R")
# f <-function(x){
#   10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
# }
#
# sigma <- 1 # noise sd
# n <- 500 # number of observations
# x <- matrix(runif(n*10),n,10) #10 variables, only first 5 matter
# y <- rnorm(n,f(x),sigma) #+ rnorm(n)
# index <- c(50, 100, 150)
# y[index] <- y[index] + rnorm(length(index), 0, 15)
n <- 200
p <- 4
noise <- rep(1, 200)
noise[c(50, 100, 150)] <- 8
x <- matrix(rnorm(n*p), nrow=n, ncol=p)
y <- matrix(x[,1]*sin(x[,1]*x[,2]) + rnorm(n, 0, noise), ncol=1)
nmcmc <- 10000
mod <- bmars(x, its = nmcmc, nu = 10, verbose = TRUE)
X <- mod$X
beta <- mod$beta
mod$count
mod$nknot[length(mod$nknot)]
tail(mod$nknot, 25)
tail(mod$mat_beta[,1:(mod$nknot[length(mod$nknot)]+1)])
# plot(colMeans(mod$mat_w[-(1:1000),]), abs(y - X%*%beta))
plot(mod$nknot, type = "l",
main = "Number of knots over time")
# plot(mod$alpha, type = "l",
#      main = "alpha^2 values over time")
plot(mod$mat_sig[-(1:100)], type = "l",
main = "Sigma^2 values over time")
plot(mod$lam, type = "l",
main = "Lambda values over time")
# matplot(mod$mat_beta, type = "l",
#         main = "Plot of regression coefficients over time")
matplot(sqrt(1/mod$mat_w[seq(nmcmc/2,nmcmc,by=2),]), type="l",
main = "Plot of v_i values over time")
hist(colMeans((sqrt(1/mod$mat_w[seq(nmcmc/2,nmcmc,by=2),]))))
# matplot(sqrt(mod$mat_u), type="l",
#         main = "Plot of u_i values over time")
plot(X %*% beta, y,
main = "Bayesian predicted values vs actual y values")
points((X %*% beta)[c(50, 100, 150)],y[c(50, 100, 150)],col="red")
abline(0, 1, lwd = 5, col = "blue1") #should follow a very straight line
mod1 <- lm(y ~ X %*% beta); rsq <- summary(mod1)$r.squared
cat("The predicted y values are correlated with the actual values with
an R^2 of", rsq, "\n")
tail(mod$mat_sig)
tail(sqrt(mod$mat_w[,1:25]))
var((y-(X%*%beta)))
var(y)
var(y[-c(50,100,150)])
packageVersion("devtools")
install.packages("devtools")
packageVersion("devtools")
timestamp()
##------ Mon Aug 24 16:34:21 2020 ------##
timestamp(quiet=T)
##------ Mon Aug 24 16:34:27 2020 ------##
rm(list = ls())
source("robust_bmars.R")
# f <-function(x){
#   10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
# }
#
# sigma <- 1 # noise sd
# n <- 500 # number of observations
# x <- matrix(runif(n*10),n,10) #10 variables, only first 5 matter
# y <- rnorm(n,f(x),sigma) #+ rnorm(n)
# index <- c(50, 100, 150)
# y[index] <- y[index] + rnorm(length(index), 0, 15)
n <- 200
p <- 4
noise <- rep(1, 200)
noise[c(50, 100, 150)] <- 8
x <- matrix(rnorm(n*p), nrow=n, ncol=p)
y <- matrix(x[,1]*sin(x[,1]*x[,2]) + rnorm(n, 0, noise), ncol=1)
nmcmc <- 10000
mod <- bmars(x, its = nmcmc, nu = 10, verbose = TRUE)
X <- mod$X
beta <- mod$beta
mod$count
mod$nknot[length(mod$nknot)]
tail(mod$nknot, 25)
tail(mod$mat_beta[,1:(mod$nknot[length(mod$nknot)]+1)])
# plot(colMeans(mod$mat_w[-(1:1000),]), abs(y - X%*%beta))
plot(mod$nknot, type = "l",
main = "Number of knots over time")
# plot(mod$alpha, type = "l",
#      main = "alpha^2 values over time")
plot(mod$mat_sig[-(1:100)], type = "l",
main = "Sigma^2 values over time")
plot(mod$lam, type = "l",
main = "Lambda values over time")
# matplot(mod$mat_beta, type = "l",
#         main = "Plot of regression coefficients over time")
matplot(sqrt(1/mod$mat_w[seq(nmcmc/2,nmcmc,by=2),]), type="l",
main = "Plot of v_i values over time")
hist(colMeans((sqrt(1/mod$mat_w[seq(nmcmc/2,nmcmc,by=2),]))))
# matplot(sqrt(mod$mat_u), type="l",
#         main = "Plot of u_i values over time")
plot(X %*% beta, y,
main = "Bayesian predicted values vs actual y values")
points((X %*% beta)[c(50, 100, 150)],y[c(50, 100, 150)],col="red")
abline(0, 1, lwd = 5, col = "blue1") #should follow a very straight line
mod1 <- lm(y ~ X %*% beta); rsq <- summary(mod1)$r.squared
cat("The predicted y values are correlated with the actual values with
an R^2 of", rsq, "\n")
tail(mod$mat_sig)
tail(sqrt(mod$mat_w[,1:25]))
var((y-(X%*%beta)))
var(y)
var(y[-c(50,100,150)])
rm(list = ls())
source("robust_bmars.R")
f <-function(x){
10*sin(2*pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- .05 # noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
# n <- 200
# p <- 4
# noise <- rep(1, 200)
# noise[c(50, 100, 150)] <- 8
# x <- matrix(rnorm(n*p), nrow=n, ncol=p)
# y <- matrix(x[,1]*sin(x[,1]*x[,2]) + rnorm(n, 0, noise), ncol=1)
nmcmc <- 10000
mod <- bmars(x, its = nmcmc, nu = 10, verbose = TRUE)
rm(list = ls())
source("robust_bmars.R")
f <-function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- 1 # noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
# n <- 200
# p <- 4
# noise <- rep(1, 200)
# noise[c(50, 100, 150)] <- 8
# x <- matrix(rnorm(n*p), nrow=n, ncol=p)
# y <- matrix(x[,1]*sin(x[,1]*x[,2]) + rnorm(n, 0, noise), ncol=1)
nmcmc <- 10000
mod <- bmars(x, its = nmcmc, nu = 10, verbose = TRUE)
X <- mod$X
beta <- mod$beta
mod$count
mod$nknot[length(mod$nknot)]
tail(mod$nknot, 25)
tail(mod$mat_beta[,1:(mod$nknot[length(mod$nknot)]+1)])
# plot(colMeans(mod$mat_w[-(1:1000),]), abs(y - X%*%beta))
plot(mod$nknot, type = "l",
main = "Number of knots over time")
# plot(mod$alpha, type = "l",
#      main = "alpha^2 values over time")
plot(mod$mat_sig[-(1:100)], type = "l",
main = "Sigma^2 values over time")
plot(mod$lam, type = "l",
main = "Lambda values over time")
# matplot(mod$mat_beta, type = "l",
#         main = "Plot of regression coefficients over time")
matplot(sqrt(1/mod$mat_w[seq(nmcmc/2,nmcmc,by=2),]), type="l",
main = "Plot of v_i values over time")
install.packages("roxygen2")
install.packages("roxygen3")
install.packages("roxygen")
bmars
rm(list = ls())
source("robust_bmars.R")
f <-function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- 1 # noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
# n <- 200
# p <- 4
# noise <- rep(1, 200)
# noise[c(50, 100, 150)] <- 8
# x <- matrix(rnorm(n*p), nrow=n, ncol=p)
# y <- matrix(x[,1]*sin(x[,1]*x[,2]) + rnorm(n, 0, noise), ncol=1)
nmcmc <- 10000
mod <- bmars(x, its = nmcmc, nu = 10, tau2=1e8, verbose = TRUE)
rm(list = ls())
source("robust_bmars.R")
f <-function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- 1 # noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
# n <- 200
# p <- 4
# noise <- rep(1, 200)
# noise[c(50, 100, 150)] <- 8
# x <- matrix(rnorm(n*p), nrow=n, ncol=p)
# y <- matrix(x[,1]*sin(x[,1]*x[,2]) + rnorm(n, 0, noise), ncol=1)
nmcmc <- 3000
mod <- bmars(x, its = nmcmc, nu = 10, tau2=1e8, verbose = TRUE)
X <- mod$X
beta <- mod$beta
mod$count
mod$nknot[length(mod$nknot)]
tail(mod$nknot, 25)
tail(mod$mat_beta[,1:(mod$nknot[length(mod$nknot)]+1)])
# plot(colMeans(mod$mat_w[-(1:1000),]), abs(y - X%*%beta))
plot(mod$nknot, type = "l",
main = "Number of knots over time")
# plot(mod$alpha, type = "l",
#      main = "alpha^2 values over time")
plot(mod$mat_sig[-(1:100)], type = "l",
main = "Sigma^2 values over time")
plot(mod$lam, type = "l",
main = "Lambda values over time")
# matplot(mod$mat_beta, type = "l",
#         main = "Plot of regression coefficients over time")
matplot(sqrt(1/mod$mat_w[seq(nmcmc/2,nmcmc,by=2),]), type="l",
main = "Plot of v_i values over time")
hist(colMeans((sqrt(1/mod$mat_w[seq(nmcmc/2,nmcmc,by=2),]))))
# matplot(sqrt(mod$mat_u), type="l",
#         main = "Plot of u_i values over time")
plot(X %*% beta, y,
main = "Bayesian predicted values vs actual y values")
points((X %*% beta)[c(50, 100, 150)],y[c(50, 100, 150)],col="red")
abline(0, 1, lwd = 5, col = "blue1") #should follow a very straight line
mod1 <- lm(y ~ X %*% beta); rsq <- summary(mod1)$r.squared
cat("The predicted y values are correlated with the actual values with
an R^2 of", rsq, "\n")
tail(mod$mat_sig)
tail(sqrt(mod$mat_w[,1:25]))
var((y-(X%*%beta)))
var(y)
var(y[-c(50,100,150)])
devtools::create("TBASS")
